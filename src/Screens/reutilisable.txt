import React, { useContext } from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import SessionContext from './SessionProvider';

const HomeScreen = () => {
  const { resetSessionTimer } = useContext(SessionContext);

  return (
    <View>
      <Text>Welcome to the Home Screen!</Text>
      <TouchableOpacity onPress={resetSessionTimer}>
        <Text>Interact with the app</Text>
      </TouchableOpacity>
    </View>
  );
};

export default HomeScreen;





import React from 'react'
import { StyleSheet, Text, View, SafeAreaView, Modal,Image, TouchableOpacity, FlatList, TextInput } from 'react-native'
import { GestureHandlerRootView, ScrollView } from 'react-native-gesture-handler'
import { useState, useEffect } from 'react'
import { useMutation, useQuery } from '@apollo/client';
import { Alert } from 'react-native';
import { ADD_FEEDBACK } from '../graphql/Mutation';
import { GET_FEDDBACK } from '../graphql/Queries';
import {jwtDecode} from 'jwt-decode';
import AsyncStorage from '@react-native-async-storage/async-storage';

const FeedbackScreen = ({ route }) => {
  const { consultation } = route.params;
  const consultationID = consultation._id;

  const getDoctorIdFromToken = async () => {
    try {
      const token = await AsyncStorage.getItem('userToken');
      console.log("Token_present",token);
      if (token) {
        const tokenString = String(token)
        const decodedToken = jwtDecode(tokenString);
        const doctorId = decodedToken.user_id;
        console.log("token decode",decodedToken);
        return doctorId;
      } else {
        console.error("Token not found");
        return null;
      }
    } catch (error) {
      console.error("Error decoding token:", error);
      return null;
    }
  };

 // States
 const [newFeedback, setNewFeedback] = useState('');
 //const [selectedFeedbackType, setSelectedFeedbackType] = useState('doctor_feedback');
 const [tableData, setTableData] = useState([]);
 

 // Queries and Mutations
 const { data, loading, error, refetch } = useQuery(GET_FEDDBACK, {
   variables: { id: consultationID },
 });

 console.log('Fetched data:', data);


 const [addFeedback, { loading: mutationLoading }] = useMutation(ADD_FEEDBACK, {
   onCompleted: () => {
     Alert.alert('Success', 'Feedback added successfully!');
     setNewFeedback('');
     refetch();
   },
   onError: (err) => {
     Alert.alert('Error', err.message);
     console.log('Error', err.message);
   },
 });

//  useEffect(() => {
//   if (data?.consultationById?.doctor_feedback) {
//     const updatedData = data?.consultationById?.doctor_feedback.map(({ __typename, ...rest }) => rest);
//     setTableData(updatedData);
//   }
// }, [data]);




if (loading) return <Text>Loading...</Text>;
 if (error) return <Text>Error: {error.message}</Text>;
 if (!data?.consultationById) return <Text>No data available</Text>;



 const handleAddFeedback = async () => {
   if (!newFeedback.trim()) {
     Alert.alert('Validation Error', 'Please enter a feedback message.');
     return;
   }
   const medical_staff_Id = await getDoctorIdFromToken();

   if (!medical_staff_Id || !consultationID) {
    Alert.alert('Error', 'User or Consultation ID is missing or invalid.');
    return;
  }
  setTableData((prevData) => [
    ...prevData,
    { comment: newFeedback },
  ]);
  setNewFeedback('');

  if (!medical_staff_Id.match(/^[a-f\d]{24}$/i)) {
    Alert.alert('Error', 'Invalid user ID.');
    return;
  }
  const feedbackData = data?.consultationById?.[selectedFeedbackType]
  ? JSON.parse(JSON.stringify(data.consultationById[selectedFeedbackType], removeTypename))
  : [];


  console.log('Payload:', {
    id: consultationID,
    record: {
     
        doctor_feedback:[ ...tableData,{ comment: newFeedback, createdAt: new Date().toISOString(), user: medical_staff_Id }],
      
    },
  });

  try {
    await addFeedback({
      variables: {
        id: consultationID,
        record: {
          [selectedFeedbackType]: [
            ...feedbackData,
            { comment: newFeedback, createdAt: new Date().toISOString(), user: medical_staff_Id },
          ],
        },
      },
    });
  } catch (err) {
    console.error(err.message);
  }
 };


 const renderFeedback = ({ item }) => (
   <View style={styles.feedbackCard}>
     <View style={styles.feedbackHeader}>
       <Image
         source={{ uri: 'https://via.placeholder.com/50' }} // Replace with actual user photo URL
         style={styles.userImage}
       />
       {/* <Text style={styles.userName}>{item.user?.first_name || 'Unknown'}</Text> */}
       <Text style={styles.userName}>{item.user?.first_name || 'Anonym'}</Text>

     </View>
     <Text style={styles.feedbackComment}>{item.comment}</Text>
     <Text style={styles.feedbackDate}>{new Date(item.createdAt).toLocaleString()}</Text>
   </View>
 );

 if (loading) return <Text>Loading...</Text>;
 if (error) return <Text>Error: {error.message}</Text>;

 const allFeedback = data.consultationById

 const updatedData = data.consultationById.map(({ __typename, ...rest }) => rest);

 console.log("mechant data ", updatedData)

//  data?.consultationById
//   ? [
//       ...(data.consultationById.doctor_feedback || []),
//       // ...(data.consultationById.call_center_feedback || []),
//     ]
//   : [];


 console.log('Data received:', data);
 console.log('Feedback data:', allFeedback);
 

 return (
   <View style={styles.container}>
     <FlatList
       data={allFeedback}
       keyExtractor={(item, index) => `${item.createdAt}-${index}`}
       renderItem={renderFeedback}
       ListEmptyComponent={<Text style={styles.noDataText}>No feedback yet</Text>}
     />

     <View style={styles.inputContainer}>
       <TextInput
         style={styles.input}
         placeholder="Write here..."
         value={newFeedback}
         onChangeText={setNewFeedback}
       />
       <TouchableOpacity
         style={styles.addButton}
         onPress={handleAddFeedback}
         disabled={mutationLoading}
       >
         <Text style={styles.addButtonText}>{mutationLoading ? 'Adding...' : 'Add'}</Text>
       </TouchableOpacity>
     </View>
   </View>
 );
};


export default FeedbackScreen

const styles = StyleSheet.create({ 
  container: {
  flex: 1,
  padding: 10,
  backgroundColor: '#f9f9f9',
},
feedbackCard: {
  backgroundColor: '#fff',
  padding: 15,
  borderRadius: 10,
  marginBottom: 10,
  elevation: 2,
},
feedbackHeader: {
  flexDirection: 'row',
  alignItems: 'center',
  marginBottom: 10,
},
userImage: {
  width: 50,
  height: 50,
  borderRadius: 25,
  marginRight: 10,
},
userName: {
  fontSize: 16,
  fontWeight: 'bold',
},
feedbackComment: {
  fontSize: 14,
  color: '#333',
  marginBottom: 5,
},
feedbackDate: {
  fontSize: 12,
  color: '#999',
  textAlign: 'right',
},
noDataText: {
  textAlign: 'center',
  color: '#999',
  marginTop: 20,
},
inputContainer: {
  flexDirection: 'row',
  alignItems: 'center',
  padding: 10,
  borderTopWidth: 1,
  borderTopColor: '#ccc',
},
input: {
  flex: 1,
  backgroundColor: '#fff',
  padding: 10,
  borderRadius: 5,
  marginRight: 10,
},
addButton: {
  backgroundColor: '#4CAF50',
  padding: 10,
  borderRadius: 5,
},
addButtonText: {
  color: '#fff',
  fontWeight: 'bold',
},
})