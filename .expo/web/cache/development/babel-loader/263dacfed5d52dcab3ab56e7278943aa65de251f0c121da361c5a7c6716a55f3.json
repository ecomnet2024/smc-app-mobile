{"ast":null,"code":"var _jsxFileName = \"/home/newuser/Desktop/tutoo flutter/smc-app-mobile/Components/SessionProvider.js\";\nimport React, { createContext, useEffect, useState, useRef } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useNavigation } from '@react-navigation/native';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SessionContext = createContext();\nexport const SessionProvider = ({\n  children\n}) => {\n  const [isSessionExpired, setIsSessionExpired] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(59 * 60);\n  const navigation = useNavigation();\n  const logoutTimer = useRef(null);\n  const TOKEN_EXPIRATION_TIME = 58 * 60 * 1000;\n  const handleLogout = async () => {\n    if (logoutTimer.current) clearTimeout(logoutTimer.current);\n    setIsSessionExpired(true);\n    await AsyncStorage.removeItem('userToken');\n    await AsyncStorage.removeItem('userEmail');\n    Alert.alert(\"Session Expired\", \"Your session has expired. Please log in again.\", [{\n      text: \"OK\",\n      onPress: () => {\n        setIsSessionExpired(false);\n        navigation.navigate(\"Login\");\n      }\n    }], {\n      cancelable: false\n    });\n  };\n  const startSessionTimer = () => {\n    if (logoutTimer.current) clearTimeout(logoutTimer.current);\n    setRemainingTime(59 * 60);\n    logoutTimer.current = setTimeout(() => {\n      handleLogout();\n    }, TOKEN_EXPIRATION_TIME);\n  };\n  const resetSessionTimer = () => {\n    startSessionTimer();\n  };\n  useEffect(() => {\n    const logInterval = setInterval(() => {\n      console.log(`Temps restant avant déconnexion: ${Math.floor(remainingTime / 60)} min`);\n    }, 10 * 60 * 1000);\n    return () => clearInterval(logInterval);\n  }, [remainingTime]);\n  useEffect(() => {\n    startSessionTimer();\n    return () => {\n      if (logoutTimer.current) clearTimeout(logoutTimer.current);\n    };\n  }, []);\n  return _jsxDEV(SessionContext.Provider, {\n    value: {\n      resetSessionTimer,\n      handleLogout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\nexport default SessionContext;","map":{"version":3,"names":["React","createContext","useEffect","useState","useRef","Alert","AsyncStorage","useNavigation","jsxDEV","_jsxDEV","SessionContext","SessionProvider","children","isSessionExpired","setIsSessionExpired","remainingTime","setRemainingTime","navigation","logoutTimer","TOKEN_EXPIRATION_TIME","handleLogout","current","clearTimeout","removeItem","alert","text","onPress","navigate","cancelable","startSessionTimer","setTimeout","resetSessionTimer","logInterval","setInterval","console","log","Math","floor","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/newuser/Desktop/tutoo flutter/smc-app-mobile/Components/SessionProvider.js"],"sourcesContent":["import React, { createContext, useEffect, useState, useRef } from 'react';\nimport { Alert } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useNavigation } from '@react-navigation/native';\n\nconst SessionContext = createContext();\n\nexport const SessionProvider = ({ children }) => {\n  const [isSessionExpired, setIsSessionExpired] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(59 * 60); \n  const navigation = useNavigation();\n  const logoutTimer = useRef(null); // Utilise une référence mutable pour gérer le timer\n\n\n  const TOKEN_EXPIRATION_TIME = 58 * 60 * 1000; // 58 minutes en millisecondes\n\n   // Fonction pour déconnecter l'utilisateur\n   const handleLogout = async () => {\n    if (logoutTimer.current) clearTimeout(logoutTimer.current); // Arrête le timer\n    setIsSessionExpired(true);\n    await AsyncStorage.removeItem('userToken');\n    await AsyncStorage.removeItem('userEmail');\n    Alert.alert(\n      \"Session Expired\",\n      \"Your session has expired. Please log in again.\",\n      [\n        {\n          text: \"OK\",\n          onPress: () => {\n            setIsSessionExpired(false);\n            navigation.navigate(\"Login\"); // Redirige vers l'écran de login\n          },\n        },\n      ],\n      { cancelable: false }\n    );\n  };\n\n  // Fonction pour démarrer le minuteur\n  const startSessionTimer = () => {\n    if (logoutTimer.current) clearTimeout(logoutTimer.current); // Réinitialise le timer si nécessaire\n    setRemainingTime(59 * 60); // Réinitialise le temps restant à 59 minutes\n\n    logoutTimer.current = setTimeout(() => {\n      handleLogout();\n    }, TOKEN_EXPIRATION_TIME);\n  };\n\n  // Réinitialiser le minuteur lorsque l'utilisateur interagit avec l'application\n  const resetSessionTimer = () => {\n    startSessionTimer();\n  };\n\n// Affiche un log toutes les 5 minutes\nuseEffect(() => {\n    const logInterval = setInterval(() => {\n      console.log(`Temps restant avant déconnexion: ${Math.floor(remainingTime / 60)} min`);\n    }, 10 * 60 * 1000); // Toutes les 10 minutes\n\n    return () => clearInterval(logInterval); // Nettoie l'intervalle lorsque le composant est démonté\n  }, [remainingTime]);\n\n  // Gestion de l'effet global pour démarrer ou arrêter le minuteur\n  useEffect(() => {\n    startSessionTimer();\n\n    return () => {\n      if (logoutTimer.current) clearTimeout(logoutTimer.current);\n    };\n  }, []);\n\n\n  return (\n    <SessionContext.Provider value={{ resetSessionTimer, handleLogout }}>\n      {children}\n    </SessionContext.Provider>\n  );\n};\n\nexport default SessionContext;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,OAAAC,KAAA;AAE1E,OAAOC,YAAY,MAAM,2CAA2C;AACpE,SAASC,aAAa,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,cAAc,GAAGT,aAAa,CAAC,CAAC;AAEtC,OAAO,MAAMU,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAC/C,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAC;EAC3D,MAAMc,UAAU,GAAGV,aAAa,CAAC,CAAC;EAClC,MAAMW,WAAW,GAAGd,MAAM,CAAC,IAAI,CAAC;EAGhC,MAAMe,qBAAqB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;EAG3C,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIF,WAAW,CAACG,OAAO,EAAEC,YAAY,CAACJ,WAAW,CAACG,OAAO,CAAC;IAC1DP,mBAAmB,CAAC,IAAI,CAAC;IACzB,MAAMR,YAAY,CAACiB,UAAU,CAAC,WAAW,CAAC;IAC1C,MAAMjB,YAAY,CAACiB,UAAU,CAAC,WAAW,CAAC;IAC1ClB,KAAK,CAACmB,KAAK,CACT,iBAAiB,EACjB,gDAAgD,EAChD,CACE;MACEC,IAAI,EAAE,IAAI;MACVC,OAAO,EAAEA,CAAA,KAAM;QACbZ,mBAAmB,CAAC,KAAK,CAAC;QAC1BG,UAAU,CAACU,QAAQ,CAAC,OAAO,CAAC;MAC9B;IACF,CAAC,CACF,EACD;MAAEC,UAAU,EAAE;IAAM,CACtB,CAAC;EACH,CAAC;EAGD,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIX,WAAW,CAACG,OAAO,EAAEC,YAAY,CAACJ,WAAW,CAACG,OAAO,CAAC;IAC1DL,gBAAgB,CAAC,EAAE,GAAG,EAAE,CAAC;IAEzBE,WAAW,CAACG,OAAO,GAAGS,UAAU,CAAC,MAAM;MACrCV,YAAY,CAAC,CAAC;IAChB,CAAC,EAAED,qBAAqB,CAAC;EAC3B,CAAC;EAGD,MAAMY,iBAAiB,GAAGA,CAAA,KAAM;IAC9BF,iBAAiB,CAAC,CAAC;EACrB,CAAC;EAGH3B,SAAS,CAAC,MAAM;IACZ,MAAM8B,WAAW,GAAGC,WAAW,CAAC,MAAM;MACpCC,OAAO,CAACC,GAAG,CAAC,oCAAoCC,IAAI,CAACC,KAAK,CAACtB,aAAa,GAAG,EAAE,CAAC,MAAM,CAAC;IACvF,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;IAElB,OAAO,MAAMuB,aAAa,CAACN,WAAW,CAAC;EACzC,CAAC,EAAE,CAACjB,aAAa,CAAC,CAAC;EAGnBb,SAAS,CAAC,MAAM;IACd2B,iBAAiB,CAAC,CAAC;IAEnB,OAAO,MAAM;MACX,IAAIX,WAAW,CAACG,OAAO,EAAEC,YAAY,CAACJ,WAAW,CAACG,OAAO,CAAC;IAC5D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAGN,OACEZ,OAAA,CAACC,cAAc,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAET,iBAAiB;MAAEX;IAAa,CAAE;IAAAR,QAAA,EACjEA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAED,eAAelC,cAAc","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}